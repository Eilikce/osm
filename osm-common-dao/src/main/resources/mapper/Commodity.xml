<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.eilikce.osm.dao.CommodityDaoImpl">
    
    <select id="selectCount" resultType="int">
        SELECT COUNT(*) FROM Commodity
    </select>

    <select id="selectCountByBarcode" resultType="int"  parameterType="int">
        SELECT COUNT(*) FROM Commodity 
        WHERE barcode = #{barcode}
    </select>
    
    <select id="selectAllCommodity" resultType="Commodity">
        SELECT * FROM Commodity
        ORDER BY CONVERT(commodity_name using gbk)
    </select>

    <select id="selectByGroupIdItemId" resultType="Commodity" parameterType="map">
        SELECT commodity_id,group_id,item_id,barcode,commodity_name,commodity_detail,img_rule,number,original,price,unit,source,detail,sales_volume,shelves,create_date
        FROM Commodity 
        WHERE group_id = #{groupId} and item_id = #{itemId}
        ORDER BY sales_volume desc
    </select>
    
    <select id="selectById" resultType="Commodity" parameterType="string">
    	SELECT commodity_id,group_id,item_id,barcode,commodity_name,commodity_detail,img_rule,number,original,price,unit,source,detail,sales_volume,shelves,create_date
    	FROM Commodity
    	WHERE commodity_id = #{commodityId}
    	ORDER BY sales_volume desc
    </select>
    
    <select id="selectCommodityBySearch" resultType="Commodity" parameterType="string">
    	SELECT commodity_id,group_id,item_id,barcode,commodity_name,commodity_detail,img_rule,number,original,price,unit,source,detail,sales_volume,shelves,create_date
    	FROM commodity 
    	WHERE commodity_name LIKE CONCAT('%',#{search},'%' )
    	OR commodity_detail LIKE CONCAT('%',#{search},'%' )
    	ORDER BY sales_volume desc
    </select>
    
    <select id="selectCommodityByPage" resultType="Commodity" parameterType="int">
        SELECT * FROM Commodity
        ORDER BY CONVERT(commodity_name using gbk)
        LIMIT #{step},10
    </select>
    
    <select id="selectCommodityFurtherByPage" resultType="CommodityFurther" parameterType="map">
      SELECT c.commodity_id,c.group_id,c.item_id,c.barcode,c.commodity_name,c.commodity_detail,c.img_rule,c.number,c.original,c.price,c.unit,c.source,c.detail,c.sales_volume,c.shelves,c.create_date,
    	i.item_name as item_name,
    	g.group_name as group_name
    	FROM COMMODITY as c ,COMMODITY_ITEM as i,COMMODITY_GROUP as g
    	WHERE c.item_id = i.item_id
    	AND c.group_id = g.group_id
    	AND i.group_id = g.group_id
    	ORDER BY commodity_id
        LIMIT #{step},#{pageSize}
    </select>
    
    <select id="selectCommodityFurtherByPageSearch" resultType="CommodityFurther" parameterType="map">
      SELECT c.commodity_id,c.group_id,c.item_id,c.barcode,c.commodity_name,c.commodity_detail,c.img_rule,c.number,c.original,c.price,c.unit,c.source,c.detail,c.sales_volume,c.shelves,c.create_date,
    	i.item_name as item_name,
    	g.group_name as group_name
    	FROM COMMODITY as c ,COMMODITY_ITEM as i,COMMODITY_GROUP as g
    	WHERE c.item_id = i.item_id
    	AND c.group_id = g.group_id
    	AND i.group_id = g.group_id
    	AND c.commodity_name LIKE CONCAT('%',#{search},'%' )
    	ORDER BY commodity_id
        LIMIT #{step},#{pageSize}
    </select>
    
    <select id="selectCommodityFurtherById" resultType="CommodityFurther" parameterType="string">
    	SELECT c.commodity_id,c.group_id,c.item_id,c.barcode,c.commodity_name,c.commodity_detail,c.img_rule,c.number,c.original,c.price,c.unit,c.source,c.detail,c.sales_volume,c.shelves,c.create_date,
    	i.item_name as item_name,
    	g.group_name as group_name
    	FROM Commodity as c ,COMMODITY_ITEM as i,COMMODITY_GROUP as g
    	WHERE c.commodity_id = #{commodityId}
    	AND c.item_id = i.item_id
    	AND c.group_id = g.group_id
    	AND i.group_id = g.group_id
    </select>

    <select id="selectCommodityFurtherByBarcode" resultType="CommodityFurther" parameterType="int">
    	SELECT c.commodity_id,c.group_id,c.item_id,c.barcode,c.commodity_name,c.commodity_detail,c.img_rule,c.number,c.original,c.price,c.unit,c.source,c.detail,c.sales_volume,c.shelves,c.create_date,
    	i.item_name as item_name,
    	g.group_name as group_name
    	FROM Commodity as c ,COMMODITY_ITEM as i,COMMODITY_GROUP as g
    	WHERE c.barcode = #{barcode}
    	AND c.item_id = i.item_id
    	AND c.group_id = g.group_id
    	AND i.group_id = g.group_id
    </select>
    
    <select id="selectCountByPage" resultType="int" parameterType="map">
        SELECT count(*) FROM (
	        SELECT c.commodity_id
	    	FROM COMMODITY as c ,COMMODITY_ITEM as i,COMMODITY_GROUP as g
	    	WHERE c.item_id = i.item_id
	    	AND c.group_id = g.group_id
	    	AND i.group_id = g.group_id
	    	ORDER BY commodity_id
	        LIMIT #{step},#{pageSize}
        ) as n
    </select>
    
    <!-- 通过id查询上架信息 -->
    <select id="selectShelvesById" resultType="int" parameterType="string">
    	SELECT shelves
    	FROM Commodity
    	WHERE commodity_id = #{commodityId}
    </select>
    
    <!-- 添加一个商品 -->
    <insert id="insertCommodity" parameterType="Commodity" useGeneratedKeys="true" keyProperty="commodity_id">
        INSERT INTO COMMODITY
        (commodity_id,group_id,item_id,barcode,commodity_name,commodity_detail,img_rule,number,original,price,unit,source,detail,sales_volume,shelves,create_date) 
        VALUES 
        (#{commodityId}, #{groupId}, #{itemId}, #{barcode}, #{commodityName}, #{commodityDetail}, #{imgRule}, #{number}, #{original}, #{price}, #{unit}, #{source}, #{detail}, #{salesVolume}, #{shelves}, now())
    </insert>
    
    <!-- 添加多个商品 -->
    <insert id="insertCommodityList" parameterType="list" useGeneratedKeys="true" keyProperty="commodity_id">
        INSERT INTO COMMODITY
        (commodity_id,group_id,item_id,barcode,commodity_name,commodity_detail,img_rule,number,original,price,unit,source,detail,sales_volume,shelves,create_date)
        VALUES 
         <foreach collection="list" item="commodity" index="index" separator="," >  
        (#{commodity.commodityId}, #{commodity.groupId}, #{commodity.itemId}, #{commodity.barcode}, #{commodity.commodityName}, #{commodity.commodityDetail}, #{commodity.imgRule}, #{commodity.number}, #{commodity.original}, #{commodity.price}, #{commodity.unit}, #{commodity.source}, #{commodity.detail}, #{commodity.salesVolume}, #{commodity.shelves}, now())
    	</foreach>  
    </insert>
    
    <!-- 更新商品信息 -->
    <update id="updateCommodity" parameterType="Commodity">
        UPDATE COMMODITY
        SET	group_id = #{groupId}, item_id = #{itemId}, barcode = #{barcode}, commodity_name = #{commodityName}, commodity_detail = #{commodityDetail},
		        img_rule = #{imgRule}, number = #{number}, original = #{original},
		        price = #{price}, unit = #{unit}, source = #{source}, detail = #{detail},shelves = #{shelves}
        WHERE commodity_Id = #{commodityId}
    </update>

    <!-- 更新上架信息 -->
    <update id="updateShelvesById" parameterType="map">
        UPDATE COMMODITY
        SET	shelves = #{shelves}
        WHERE commodity_Id = #{commodityId}
    </update>
    
    <!-- 删除一个商品 -->
    <delete id="deleteCommodityById" parameterType="string">
    	DELETE FROM COMMODITY
    	WHERE commodity_Id = #{commodityId}
    </delete>

    <!-- 删除多个商品 根据起止id -->
    <delete id="deleteCommodityByStartEndId" parameterType="map">
	    <![CDATA[ 
			DELETE FROM COMMODITY
	    	WHERE id >= #{startCommodityId}
	    	AND id <= #{endCommodityId}
	    ]]>  
    </delete>
    
</mapper>
